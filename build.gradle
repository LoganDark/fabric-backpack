plugins {
	id 'fabric-loom'
	id 'maven-publish'
	id 'org.jetbrains.kotlin.jvm'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {}

repositories {
	maven { url = 'http://maven.fabricmc.net/' }

	// Cardinal Components API
	maven { url = 'https://dl.bintray.com/ladysnake/libs' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric Loader actually doesn't contain much Minecraft-specific
	// functionality, so we need a Fabric API module to load our mod's resource
	// pack. Without this module, the backpack won't have a name or texture.
	//noinspection GroovyAssignabilityCheck
	modImplementation(fabricApi.module('fabric-resource-loader-v0', project.fabric_version))

	// This mod provides the Kotlin standard library, which is needed for just
	// about any basic feature of the language. You could write Kotlin without
	// using its standard library, but it would be absolute hell.
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	// We need Cardinal Components Base for Cardinal Components Item, which we
	// use to store the inventory on the item. It makes things easy for us and
	// as a bonus allows other mods to operate on the backpack if needed.
	modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cca_version}"
	modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${project.cca_version}"

	// Include those two mods as well, as a jar-in-jar. Fabric Loader will look
	// inside our mod, see these, and attempt to load them as well (as long as
	// there's no newer version in the mods folder).
	include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cca_version}"
	include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${project.cca_version}"
}

// This just handles turning ${version} in the fabric.mod.json into the mod's
// actual version.
processResources {
	inputs.property 'version', project.version

	from(sourceSets.main.resources.srcDirs) {
		include 'fabric.mod.json'
		expand 'version': project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'fabric.mod.json'
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set('sources')
	from sourceSets.main.allSource
}

// Puts LICENSE inside the generated jar
jar {
	from 'LICENSE'
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}

			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()

		// I personally use a setup where ~/maven is a Git repository. I can run
		// the `publish` task from my IDE, commit the changes to the repository
		// and then `git push` it straight to `maven.logandark.net`. You may
		// want to adopt a similar model, or you may want to try something
		// completely different. This is by far the simplest, in my opinion.
		maven {
			url = uri(file(System.properties['user.home'] + '/maven'))
		}
	}
}

compileKotlin.kotlinOptions.jvmTarget = '1.8'
